
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e34  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001260  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000008c8  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b7 06 	call	0xd6e	; 0xd6e <main>
  64:	0c 94 18 07 	jmp	0xe30	; 0xe30 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Power>:
#include"../../lib/BIT_MATH.h"
#include"../../lib/AVR32_REG.h"
#include "I2C_Private.h"

u8 Power(int base, int exp)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <Power+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <Power+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <Power+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	9c 83       	std	Y+4, r25	; 0x04
  7c:	8b 83       	std	Y+3, r24	; 0x03
  7e:	7e 83       	std	Y+6, r23	; 0x06
  80:	6d 83       	std	Y+5, r22	; 0x05
    int result = 1;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	9a 83       	std	Y+2, r25	; 0x02
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	13 c0       	rjmp	.+38     	; 0xb2 <Power+0x46>
    while(exp)
    {
        result = result * base;
  8c:	29 81       	ldd	r18, Y+1	; 0x01
  8e:	3a 81       	ldd	r19, Y+2	; 0x02
  90:	8b 81       	ldd	r24, Y+3	; 0x03
  92:	9c 81       	ldd	r25, Y+4	; 0x04
  94:	ac 01       	movw	r20, r24
  96:	24 9f       	mul	r18, r20
  98:	c0 01       	movw	r24, r0
  9a:	25 9f       	mul	r18, r21
  9c:	90 0d       	add	r25, r0
  9e:	34 9f       	mul	r19, r20
  a0:	90 0d       	add	r25, r0
  a2:	11 24       	eor	r1, r1
  a4:	9a 83       	std	Y+2, r25	; 0x02
  a6:	89 83       	std	Y+1, r24	; 0x01
        exp--;
  a8:	8d 81       	ldd	r24, Y+5	; 0x05
  aa:	9e 81       	ldd	r25, Y+6	; 0x06
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	9e 83       	std	Y+6, r25	; 0x06
  b0:	8d 83       	std	Y+5, r24	; 0x05
#include "I2C_Private.h"

u8 Power(int base, int exp)
{
    int result = 1;
    while(exp)
  b2:	8d 81       	ldd	r24, Y+5	; 0x05
  b4:	9e 81       	ldd	r25, Y+6	; 0x06
  b6:	00 97       	sbiw	r24, 0x00	; 0
  b8:	49 f7       	brne	.-46     	; 0x8c <Power+0x20>
    {
        result = result * base;
        exp--;
    }
    return result;}
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	26 96       	adiw	r28, 0x06	; 6
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	08 95       	ret

000000ce <I2C_InitMaster>:

void I2C_InitMaster(u16 Copy_U8Freq,I2C_PRE Copy_U8Prescaller,u8 Copy_U8Address)
{
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	00 d0       	rcall	.+0      	; 0xe0 <I2C_InitMaster+0x12>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <I2C_InitMaster+0x14>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	6b 83       	std	Y+3, r22	; 0x03
  ec:	4c 83       	std	Y+4, r20	; 0x04

	TWBR= ((F_CPU/Copy_U8Freq)-16)/(2*Power(4,Copy_U8Prescaller));
  ee:	cc 24       	eor	r12, r12
  f0:	dd 24       	eor	r13, r13
  f2:	68 94       	set
  f4:	c5 f8       	bld	r12, 5
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	9c 01       	movw	r18, r24
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	92 e1       	ldi	r25, 0x12	; 18
 104:	aa e7       	ldi	r26, 0x7A	; 122
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	bc 01       	movw	r22, r24
 10a:	cd 01       	movw	r24, r26
 10c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodsi4>
 110:	da 01       	movw	r26, r20
 112:	c9 01       	movw	r24, r18
 114:	0f 2e       	mov	r0, r31
 116:	f0 ef       	ldi	r31, 0xF0	; 240
 118:	ef 2e       	mov	r14, r31
 11a:	ff ef       	ldi	r31, 0xFF	; 255
 11c:	ff 2e       	mov	r15, r31
 11e:	ff ef       	ldi	r31, 0xFF	; 255
 120:	0f 2f       	mov	r16, r31
 122:	ff ef       	ldi	r31, 0xFF	; 255
 124:	1f 2f       	mov	r17, r31
 126:	f0 2d       	mov	r31, r0
 128:	e8 0e       	add	r14, r24
 12a:	f9 1e       	adc	r15, r25
 12c:	0a 1f       	adc	r16, r26
 12e:	1b 1f       	adc	r17, r27
 130:	8b 81       	ldd	r24, Y+3	; 0x03
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	b9 01       	movw	r22, r18
 13c:	0e 94 36 00 	call	0x6c	; 0x6c <Power>
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	9c 01       	movw	r18, r24
 14a:	44 27       	eor	r20, r20
 14c:	37 fd       	sbrc	r19, 7
 14e:	40 95       	com	r20
 150:	54 2f       	mov	r21, r20
 152:	c8 01       	movw	r24, r16
 154:	b7 01       	movw	r22, r14
 156:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divmodsi4>
 15a:	da 01       	movw	r26, r20
 15c:	c9 01       	movw	r24, r18
 15e:	f6 01       	movw	r30, r12
 160:	80 83       	st	Z, r24
 	//TWBR=0X02;
	SET_BIT(TWCR,ACK);
 162:	a6 e5       	ldi	r26, 0x56	; 86
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e6 e5       	ldi	r30, 0x56	; 86
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	8c 93       	st	X, r24
	TWSR|=Copy_U8Prescaller;
 170:	a1 e2       	ldi	r26, 0x21	; 33
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	e1 e2       	ldi	r30, 0x21	; 33
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	89 2b       	or	r24, r25
 17e:	8c 93       	st	X, r24
	TWAR=Copy_U8Address<<1;
 180:	e2 e2       	ldi	r30, 0x22	; 34
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	88 0f       	add	r24, r24
 188:	80 83       	st	Z, r24


}
 18a:	0f 90       	pop	r0
 18c:	0f 90       	pop	r0
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	cf 91       	pop	r28
 194:	df 91       	pop	r29
 196:	1f 91       	pop	r17
 198:	0f 91       	pop	r16
 19a:	ff 90       	pop	r15
 19c:	ef 90       	pop	r14
 19e:	df 90       	pop	r13
 1a0:	cf 90       	pop	r12
 1a2:	08 95       	ret

000001a4 <I2C_InitSlave>:
void I2C_InitSlave(u8 Copy_U8Address)
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	0f 92       	push	r0
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	89 83       	std	Y+1, r24	; 0x01
	TWAR=Copy_U8Address<<1;
 1b0:	e2 e2       	ldi	r30, 0x22	; 34
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	89 81       	ldd	r24, Y+1	; 0x01
 1b6:	88 0f       	add	r24, r24
 1b8:	80 83       	st	Z, r24


}
 1ba:	0f 90       	pop	r0
 1bc:	cf 91       	pop	r28
 1be:	df 91       	pop	r29
 1c0:	08 95       	ret

000001c2 <I2C_VidEnableGeneralCall>:


void I2C_VidEnableGeneralCall()
{
 1c2:	df 93       	push	r29
 1c4:	cf 93       	push	r28
 1c6:	cd b7       	in	r28, 0x3d	; 61
 1c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWAR,TWGCE);
 1ca:	a2 e2       	ldi	r26, 0x22	; 34
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e2 e2       	ldi	r30, 0x22	; 34
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	8c 93       	st	X, r24
}
 1d8:	cf 91       	pop	r28
 1da:	df 91       	pop	r29
 1dc:	08 95       	ret

000001de <I2C_VidDisableGeneralCall>:

void I2C_VidDisableGeneralCall()
{
 1de:	df 93       	push	r29
 1e0:	cf 93       	push	r28
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWAR,TWGCE);
 1e6:	a2 e2       	ldi	r26, 0x22	; 34
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e2 e2       	ldi	r30, 0x22	; 34
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	8e 7f       	andi	r24, 0xFE	; 254
 1f2:	8c 93       	st	X, r24
}
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <I2C_Start>:

u8 I2C_Start()
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	0f 92       	push	r0
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	TWCR|= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 204:	a6 e5       	ldi	r26, 0x56	; 86
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e6 e5       	ldi	r30, 0x56	; 86
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	84 6a       	ori	r24, 0xA4	; 164
 210:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
 212:	e6 e5       	ldi	r30, 0x56	; 86
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	88 23       	and	r24, r24
 21a:	dc f7       	brge	.-10     	; 0x212 <I2C_Start+0x18>
	if ((TWSR & PSC_STATUS) != START)
 21c:	e1 e2       	ldi	r30, 0x21	; 33
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	90 70       	andi	r25, 0x00	; 0
 22a:	88 30       	cpi	r24, 0x08	; 8
 22c:	91 05       	cpc	r25, r1
 22e:	11 f0       	breq	.+4      	; 0x234 <I2C_Start+0x3a>
		return 0;
 230:	19 82       	std	Y+1, r1	; 0x01
 232:	02 c0       	rjmp	.+4      	; 0x238 <I2C_Start+0x3e>
	return 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	89 81       	ldd	r24, Y+1	; 0x01
	}
 23a:	0f 90       	pop	r0
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <I2C_RepeatedStart>:

u8 I2C_RepeatedStart()
{
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	0f 92       	push	r0
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
	TWCR|= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 24c:	a6 e5       	ldi	r26, 0x56	; 86
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e6 e5       	ldi	r30, 0x56	; 86
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	84 6a       	ori	r24, 0xA4	; 164
 258:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
 25a:	e6 e5       	ldi	r30, 0x56	; 86
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 23       	and	r24, r24
 262:	dc f7       	brge	.-10     	; 0x25a <I2C_RepeatedStart+0x18>
	if ((TWSR & PSC_STATUS) != REPATED_START)
 264:	e1 e2       	ldi	r30, 0x21	; 33
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	88 7f       	andi	r24, 0xF8	; 248
 270:	90 70       	andi	r25, 0x00	; 0
 272:	80 31       	cpi	r24, 0x10	; 16
 274:	91 05       	cpc	r25, r1
 276:	11 f0       	breq	.+4      	; 0x27c <I2C_RepeatedStart+0x3a>
		return 0;
 278:	19 82       	std	Y+1, r1	; 0x01
 27a:	02 c0       	rjmp	.+4      	; 0x280 <I2C_RepeatedStart+0x3e>
	return 1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	89 81       	ldd	r24, Y+1	; 0x01
	}
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <I2C_SendAddress>:

u8 I2C_SendAddress(u8 Copy_U8Addresss,u8 Copy_U8RW){
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <I2C_SendAddress+0x6>
 290:	0f 92       	push	r0
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	89 83       	std	Y+1, r24	; 0x01
 298:	6a 83       	std	Y+2, r22	; 0x02
	TWDR=(Copy_U8Addresss<<1)|Copy_U8RW;
 29a:	e3 e2       	ldi	r30, 0x23	; 35
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	88 2f       	mov	r24, r24
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	98 2f       	mov	r25, r24
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	89 2b       	or	r24, r25
 2ae:	80 83       	st	Z, r24
	CLR_BIT(TWCR,5);//to clear start bit
 2b0:	a6 e5       	ldi	r26, 0x56	; 86
 2b2:	b0 e0       	ldi	r27, 0x00	; 0
 2b4:	e6 e5       	ldi	r30, 0x56	; 86
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	8f 7d       	andi	r24, 0xDF	; 223
 2bc:	8c 93       	st	X, r24
	TWCR|=(1<<TWINT);//this start send address
 2be:	a6 e5       	ldi	r26, 0x56	; 86
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	e6 e5       	ldi	r30, 0x56	; 86
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	80 68       	ori	r24, 0x80	; 128
 2ca:	8c 93       	st	X, r24
	while (!(TWCR & (1<<7)));
 2cc:	e6 e5       	ldi	r30, 0x56	; 86
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 23       	and	r24, r24
 2d4:	dc f7       	brge	.-10     	; 0x2cc <I2C_SendAddress+0x42>
	if(((TWSR&PSC_STATUS)==TRANS_ACK)||((TWSR&0xf8)==REC_ACK))
 2d6:	e1 e2       	ldi	r30, 0x21	; 33
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 2f       	mov	r24, r24
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	88 7f       	andi	r24, 0xF8	; 248
 2e2:	90 70       	andi	r25, 0x00	; 0
 2e4:	88 31       	cpi	r24, 0x18	; 24
 2e6:	91 05       	cpc	r25, r1
 2e8:	51 f0       	breq	.+20     	; 0x2fe <I2C_SendAddress+0x74>
 2ea:	e1 e2       	ldi	r30, 0x21	; 33
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	88 7f       	andi	r24, 0xF8	; 248
 2f6:	90 70       	andi	r25, 0x00	; 0
 2f8:	80 34       	cpi	r24, 0x40	; 64
 2fa:	91 05       	cpc	r25, r1
 2fc:	19 f4       	brne	.+6      	; 0x304 <I2C_SendAddress+0x7a>
	{
		return 1;
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	8b 83       	std	Y+3, r24	; 0x03
 302:	01 c0       	rjmp	.+2      	; 0x306 <I2C_SendAddress+0x7c>
	}
	return 0;
 304:	1b 82       	std	Y+3, r1	; 0x03
 306:	8b 81       	ldd	r24, Y+3	; 0x03
}
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <I2C_U8MasterSend>:

u8 I2C_U8MasterSend(u8 Copy_U8Data){
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	00 d0       	rcall	.+0      	; 0x31a <I2C_U8MasterSend+0x6>
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	89 83       	std	Y+1, r24	; 0x01

	TWDR=Copy_U8Data;
 320:	e3 e2       	ldi	r30, 0x23	; 35
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	89 81       	ldd	r24, Y+1	; 0x01
 326:	80 83       	st	Z, r24
	TWCR|=(1<<TWINT);
 328:	a6 e5       	ldi	r26, 0x56	; 86
 32a:	b0 e0       	ldi	r27, 0x00	; 0
 32c:	e6 e5       	ldi	r30, 0x56	; 86
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	80 68       	ori	r24, 0x80	; 128
 334:	8c 93       	st	X, r24
	while (!(TWCR & (1<<TWINT)));
 336:	e6 e5       	ldi	r30, 0x56	; 86
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	dc f7       	brge	.-10     	; 0x336 <I2C_U8MasterSend+0x22>
	if(((TWSR&PSC_STATUS)==MASTER_TRANS))
 340:	e1 e2       	ldi	r30, 0x21	; 33
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	88 7f       	andi	r24, 0xF8	; 248
 34c:	90 70       	andi	r25, 0x00	; 0
 34e:	88 32       	cpi	r24, 0x28	; 40
 350:	91 05       	cpc	r25, r1
 352:	19 f4       	brne	.+6      	; 0x35a <I2C_U8MasterSend+0x46>
			{
				return 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8a 83       	std	Y+2, r24	; 0x02
 358:	01 c0       	rjmp	.+2      	; 0x35c <I2C_U8MasterSend+0x48>
			}
			return 0;
 35a:	1a 82       	std	Y+2, r1	; 0x02
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
}
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	cf 91       	pop	r28
 364:	df 91       	pop	r29
 366:	08 95       	ret

00000368 <I2C_U8SlaveReceive>:
u8 I2C_U8SlaveReceive(u8 *Copy_U8Data){
 368:	df 93       	push	r29
 36a:	cf 93       	push	r28
 36c:	00 d0       	rcall	.+0      	; 0x36e <I2C_U8SlaveReceive+0x6>
 36e:	0f 92       	push	r0
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	9a 83       	std	Y+2, r25	; 0x02
 376:	89 83       	std	Y+1, r24	; 0x01
	TWCR|=(1<<7)|(1<<TWEN)|(1<<ACK);
 378:	a6 e5       	ldi	r26, 0x56	; 86
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e6 e5       	ldi	r30, 0x56	; 86
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	84 6c       	ori	r24, 0xC4	; 196
 384:	8c 93       	st	X, r24
		while (!(TWCR & (1<<7)));
 386:	e6 e5       	ldi	r30, 0x56	; 86
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 23       	and	r24, r24
 38e:	dc f7       	brge	.-10     	; 0x386 <I2C_U8SlaveReceive+0x1e>
		if(((TWSR&0xf8)==SLAVE_REC))
 390:	e1 e2       	ldi	r30, 0x21	; 33
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	88 2f       	mov	r24, r24
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	88 7f       	andi	r24, 0xF8	; 248
 39c:	90 70       	andi	r25, 0x00	; 0
 39e:	80 38       	cpi	r24, 0x80	; 128
 3a0:	91 05       	cpc	r25, r1
 3a2:	49 f4       	brne	.+18     	; 0x3b6 <I2C_U8SlaveReceive+0x4e>
				{
					*Copy_U8Data=TWDR;
 3a4:	e3 e2       	ldi	r30, 0x23	; 35
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	e9 81       	ldd	r30, Y+1	; 0x01
 3ac:	fa 81       	ldd	r31, Y+2	; 0x02
 3ae:	80 83       	st	Z, r24
					return 1;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	8b 83       	std	Y+3, r24	; 0x03
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <I2C_U8SlaveReceive+0x50>
				}
				return 0;
 3b6:	1b 82       	std	Y+3, r1	; 0x03
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
 3c4:	08 95       	ret

000003c6 <I2C_U8SlaveSend>:
u8 I2C_U8SlaveSend(u8 Copy_U8Data){
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <I2C_U8SlaveSend+0x6>
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
 3d0:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Copy_U8Data;
 3d2:	e3 e2       	ldi	r30, 0x23	; 35
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	80 83       	st	Z, r24
		TWCR=(1<<7);
 3da:	e6 e5       	ldi	r30, 0x56	; 86
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	80 83       	st	Z, r24
		while (!(TWCR & (1<<7)));
 3e2:	e6 e5       	ldi	r30, 0x56	; 86
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	88 23       	and	r24, r24
 3ea:	dc f7       	brge	.-10     	; 0x3e2 <I2C_U8SlaveSend+0x1c>
		if(((TWSR&0xf8)==SLAVE_TRANS))
 3ec:	e1 e2       	ldi	r30, 0x21	; 33
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	88 2f       	mov	r24, r24
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	88 7f       	andi	r24, 0xF8	; 248
 3f8:	90 70       	andi	r25, 0x00	; 0
 3fa:	88 3c       	cpi	r24, 0xC8	; 200
 3fc:	91 05       	cpc	r25, r1
 3fe:	19 f4       	brne	.+6      	; 0x406 <I2C_U8SlaveSend+0x40>
				{
					return 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	8a 83       	std	Y+2, r24	; 0x02
 404:	01 c0       	rjmp	.+2      	; 0x408 <I2C_U8SlaveSend+0x42>
				}
				return 0;
 406:	1a 82       	std	Y+2, r1	; 0x02
 408:	8a 81       	ldd	r24, Y+2	; 0x02
}
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	cf 91       	pop	r28
 410:	df 91       	pop	r29
 412:	08 95       	ret

00000414 <I2C_U8MasterReceive>:

u8 I2C_U8MasterReceive(u8 *Copy_U8Data){
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	00 d0       	rcall	.+0      	; 0x41a <I2C_U8MasterReceive+0x6>
 41a:	0f 92       	push	r0
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
 420:	9a 83       	std	Y+2, r25	; 0x02
 422:	89 83       	std	Y+1, r24	; 0x01
	TWCR|=(1<<7);
 424:	a6 e5       	ldi	r26, 0x56	; 86
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	e6 e5       	ldi	r30, 0x56	; 86
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	8c 93       	st	X, r24
		while (!(TWCR & (1<<7)));
 432:	e6 e5       	ldi	r30, 0x56	; 86
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	88 23       	and	r24, r24
 43a:	dc f7       	brge	.-10     	; 0x432 <I2C_U8MasterReceive+0x1e>
		if(((TWSR&0xf8)==MASTER_REC))
 43c:	e1 e2       	ldi	r30, 0x21	; 33
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	88 2f       	mov	r24, r24
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	88 7f       	andi	r24, 0xF8	; 248
 448:	90 70       	andi	r25, 0x00	; 0
 44a:	80 35       	cpi	r24, 0x50	; 80
 44c:	91 05       	cpc	r25, r1
 44e:	49 f4       	brne	.+18     	; 0x462 <I2C_U8MasterReceive+0x4e>
				{
					*Copy_U8Data=TWDR;
 450:	e3 e2       	ldi	r30, 0x23	; 35
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	80 81       	ld	r24, Z
 456:	e9 81       	ldd	r30, Y+1	; 0x01
 458:	fa 81       	ldd	r31, Y+2	; 0x02
 45a:	80 83       	st	Z, r24
					return 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	8b 83       	std	Y+3, r24	; 0x03
 460:	01 c0       	rjmp	.+2      	; 0x464 <I2C_U8MasterReceive+0x50>
				}
				return 0;
 462:	1b 82       	std	Y+3, r1	; 0x03
 464:	8b 81       	ldd	r24, Y+3	; 0x03
}
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	0f 90       	pop	r0
 46c:	cf 91       	pop	r28
 46e:	df 91       	pop	r29
 470:	08 95       	ret

00000472 <I2C_VidStop>:



void I2C_VidStop(){
 472:	df 93       	push	r29
 474:	cf 93       	push	r28
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
	TWCR|=(1<<TWINT)|(1<<TWSTO);
 47a:	a6 e5       	ldi	r26, 0x56	; 86
 47c:	b0 e0       	ldi	r27, 0x00	; 0
 47e:	e6 e5       	ldi	r30, 0x56	; 86
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	80 69       	ori	r24, 0x90	; 144
 486:	8c 93       	st	X, r24
}
 488:	cf 91       	pop	r28
 48a:	df 91       	pop	r29
 48c:	08 95       	ret

0000048e <DIO_VidSetPinDirection>:
		error=ES_OK;
		return error;
}
*/
void DIO_VidSetPinDirection(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Direction)
{	ErrorState error=ES_NOK;
 48e:	df 93       	push	r29
 490:	cf 93       	push	r28
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	28 97       	sbiw	r28, 0x08	; 8
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	8a 83       	std	Y+2, r24	; 0x02
 4a4:	6b 83       	std	Y+3, r22	; 0x03
 4a6:	4c 83       	std	Y+4, r20	; 0x04
 4a8:	19 82       	std	Y+1, r1	; 0x01
	/*check if dir is output*/
	if(Output == Copy_U8Direction)
 4aa:	8c 81       	ldd	r24, Y+4	; 0x04
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	09 f0       	breq	.+2      	; 0x4b2 <DIO_VidSetPinDirection+0x24>
 4b0:	71 c0       	rjmp	.+226    	; 0x594 <DIO_VidSetPinDirection+0x106>
	{	error=ES_OK;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_U8port)
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	38 87       	std	Y+8, r19	; 0x08
 4be:	2f 83       	std	Y+7, r18	; 0x07
 4c0:	8f 81       	ldd	r24, Y+7	; 0x07
 4c2:	98 85       	ldd	r25, Y+8	; 0x08
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 05       	cpc	r25, r1
 4c8:	49 f1       	breq	.+82     	; 0x51c <DIO_VidSetPinDirection+0x8e>
 4ca:	2f 81       	ldd	r18, Y+7	; 0x07
 4cc:	38 85       	ldd	r19, Y+8	; 0x08
 4ce:	22 30       	cpi	r18, 0x02	; 2
 4d0:	31 05       	cpc	r19, r1
 4d2:	2c f4       	brge	.+10     	; 0x4de <DIO_VidSetPinDirection+0x50>
 4d4:	8f 81       	ldd	r24, Y+7	; 0x07
 4d6:	98 85       	ldd	r25, Y+8	; 0x08
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_VidSetPinDirection+0x66>
 4dc:	d4 c0       	rjmp	.+424    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
 4de:	2f 81       	ldd	r18, Y+7	; 0x07
 4e0:	38 85       	ldd	r19, Y+8	; 0x08
 4e2:	22 30       	cpi	r18, 0x02	; 2
 4e4:	31 05       	cpc	r19, r1
 4e6:	71 f1       	breq	.+92     	; 0x544 <DIO_VidSetPinDirection+0xb6>
 4e8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ea:	98 85       	ldd	r25, Y+8	; 0x08
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	91 05       	cpc	r25, r1
 4f0:	e9 f1       	breq	.+122    	; 0x56c <DIO_VidSetPinDirection+0xde>
 4f2:	c9 c0       	rjmp	.+402    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		{
		case PortA :	SET_BIT(DDRA,Copy_U8Pin);	break;
 4f4:	aa e3       	ldi	r26, 0x3A	; 58
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	ea e3       	ldi	r30, 0x3A	; 58
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_VidSetPinDirection+0x84>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_VidSetPinDirection+0x80>
 516:	84 2b       	or	r24, r20
 518:	8c 93       	st	X, r24
 51a:	b5 c0       	rjmp	.+362    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortB :	SET_BIT(DDRB,Copy_U8Pin);	break;
 51c:	a7 e3       	ldi	r26, 0x37	; 55
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e7 e3       	ldi	r30, 0x37	; 55
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	48 2f       	mov	r20, r24
 528:	8b 81       	ldd	r24, Y+3	; 0x03
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 2e       	mov	r0, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_VidSetPinDirection+0xac>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_VidSetPinDirection+0xa8>
 53e:	84 2b       	or	r24, r20
 540:	8c 93       	st	X, r24
 542:	a1 c0       	rjmp	.+322    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortC :	SET_BIT(DDRC,Copy_U8Pin);	break;
 544:	a4 e3       	ldi	r26, 0x34	; 52
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e4 e3       	ldi	r30, 0x34	; 52
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8b 81       	ldd	r24, Y+3	; 0x03
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_VidSetPinDirection+0xd4>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_VidSetPinDirection+0xd0>
 566:	84 2b       	or	r24, r20
 568:	8c 93       	st	X, r24
 56a:	8d c0       	rjmp	.+282    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortD :	SET_BIT(DDRD,Copy_U8Pin);	break;
 56c:	a1 e3       	ldi	r26, 0x31	; 49
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	e1 e3       	ldi	r30, 0x31	; 49
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_VidSetPinDirection+0xfc>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_VidSetPinDirection+0xf8>
 58e:	84 2b       	or	r24, r20
 590:	8c 93       	st	X, r24
 592:	79 c0       	rjmp	.+242    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		default:									break;
		}
	}
	else if(Input == Copy_U8Direction)	/*check if dir is input*/
 594:	8c 81       	ldd	r24, Y+4	; 0x04
 596:	88 23       	and	r24, r24
 598:	09 f0       	breq	.+2      	; 0x59c <DIO_VidSetPinDirection+0x10e>
 59a:	75 c0       	rjmp	.+234    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
	{	error=ES_OK;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_U8port)
 5a0:	8a 81       	ldd	r24, Y+2	; 0x02
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	3e 83       	std	Y+6, r19	; 0x06
 5a8:	2d 83       	std	Y+5, r18	; 0x05
 5aa:	8d 81       	ldd	r24, Y+5	; 0x05
 5ac:	9e 81       	ldd	r25, Y+6	; 0x06
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	91 05       	cpc	r25, r1
 5b2:	59 f1       	breq	.+86     	; 0x60a <DIO_VidSetPinDirection+0x17c>
 5b4:	2d 81       	ldd	r18, Y+5	; 0x05
 5b6:	3e 81       	ldd	r19, Y+6	; 0x06
 5b8:	22 30       	cpi	r18, 0x02	; 2
 5ba:	31 05       	cpc	r19, r1
 5bc:	2c f4       	brge	.+10     	; 0x5c8 <DIO_VidSetPinDirection+0x13a>
 5be:	8d 81       	ldd	r24, Y+5	; 0x05
 5c0:	9e 81       	ldd	r25, Y+6	; 0x06
 5c2:	00 97       	sbiw	r24, 0x00	; 0
 5c4:	69 f0       	breq	.+26     	; 0x5e0 <DIO_VidSetPinDirection+0x152>
 5c6:	5f c0       	rjmp	.+190    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
 5c8:	2d 81       	ldd	r18, Y+5	; 0x05
 5ca:	3e 81       	ldd	r19, Y+6	; 0x06
 5cc:	22 30       	cpi	r18, 0x02	; 2
 5ce:	31 05       	cpc	r19, r1
 5d0:	89 f1       	breq	.+98     	; 0x634 <DIO_VidSetPinDirection+0x1a6>
 5d2:	8d 81       	ldd	r24, Y+5	; 0x05
 5d4:	9e 81       	ldd	r25, Y+6	; 0x06
 5d6:	83 30       	cpi	r24, 0x03	; 3
 5d8:	91 05       	cpc	r25, r1
 5da:	09 f4       	brne	.+2      	; 0x5de <DIO_VidSetPinDirection+0x150>
 5dc:	40 c0       	rjmp	.+128    	; 0x65e <DIO_VidSetPinDirection+0x1d0>
 5de:	53 c0       	rjmp	.+166    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		{
		case PortA :	CLR_BIT(DDRA,Copy_U8Pin);	 break;
 5e0:	aa e3       	ldi	r26, 0x3A	; 58
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	ea e3       	ldi	r30, 0x3A	; 58
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	48 2f       	mov	r20, r24
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 2e       	mov	r0, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_VidSetPinDirection+0x170>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_VidSetPinDirection+0x16c>
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	8c 93       	st	X, r24
 608:	3e c0       	rjmp	.+124    	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortB :	CLR_BIT(DDRB,Copy_U8Pin);	 break;
 60a:	a7 e3       	ldi	r26, 0x37	; 55
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e7 e3       	ldi	r30, 0x37	; 55
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_VidSetPinDirection+0x19a>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_VidSetPinDirection+0x196>
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	8c 93       	st	X, r24
 632:	29 c0       	rjmp	.+82     	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortC :	CLR_BIT(DDRC,Copy_U8Pin);	 break;
 634:	a4 e3       	ldi	r26, 0x34	; 52
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e4 e3       	ldi	r30, 0x34	; 52
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	48 2f       	mov	r20, r24
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 2e       	mov	r0, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_VidSetPinDirection+0x1c4>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_VidSetPinDirection+0x1c0>
 656:	80 95       	com	r24
 658:	84 23       	and	r24, r20
 65a:	8c 93       	st	X, r24
 65c:	14 c0       	rjmp	.+40     	; 0x686 <DIO_VidSetPinDirection+0x1f8>
		case PortD :	CLR_BIT(DDRD,Copy_U8Pin);    break;
 65e:	a1 e3       	ldi	r26, 0x31	; 49
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e1 e3       	ldi	r30, 0x31	; 49
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 2e       	mov	r0, r18
 676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_VidSetPinDirection+0x1ee>
 678:	88 0f       	add	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	0a 94       	dec	r0
 67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_VidSetPinDirection+0x1ea>
 680:	80 95       	com	r24
 682:	84 23       	and	r24, r20
 684:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
 }
 686:	28 96       	adiw	r28, 0x08	; 8
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Copy_U8port,u8 Copy_U8Pin,u8 Copy_U8Value)
{
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
 6a0:	27 97       	sbiw	r28, 0x07	; 7
 6a2:	0f b6       	in	r0, 0x3f	; 63
 6a4:	f8 94       	cli
 6a6:	de bf       	out	0x3e, r29	; 62
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	cd bf       	out	0x3d, r28	; 61
 6ac:	89 83       	std	Y+1, r24	; 0x01
 6ae:	6a 83       	std	Y+2, r22	; 0x02
 6b0:	4b 83       	std	Y+3, r20	; 0x03

	if(High== Copy_U8Value)
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	81 30       	cpi	r24, 0x01	; 1
 6b6:	09 f0       	breq	.+2      	; 0x6ba <DIO_VidSetPinValue+0x22>
 6b8:	6f c0       	rjmp	.+222    	; 0x798 <DIO_VidSetPinValue+0x100>
	{
		switch(Copy_U8port)
 6ba:	89 81       	ldd	r24, Y+1	; 0x01
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	3f 83       	std	Y+7, r19	; 0x07
 6c2:	2e 83       	std	Y+6, r18	; 0x06
 6c4:	8e 81       	ldd	r24, Y+6	; 0x06
 6c6:	9f 81       	ldd	r25, Y+7	; 0x07
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	91 05       	cpc	r25, r1
 6cc:	49 f1       	breq	.+82     	; 0x720 <DIO_VidSetPinValue+0x88>
 6ce:	2e 81       	ldd	r18, Y+6	; 0x06
 6d0:	3f 81       	ldd	r19, Y+7	; 0x07
 6d2:	22 30       	cpi	r18, 0x02	; 2
 6d4:	31 05       	cpc	r19, r1
 6d6:	2c f4       	brge	.+10     	; 0x6e2 <DIO_VidSetPinValue+0x4a>
 6d8:	8e 81       	ldd	r24, Y+6	; 0x06
 6da:	9f 81       	ldd	r25, Y+7	; 0x07
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	61 f0       	breq	.+24     	; 0x6f8 <DIO_VidSetPinValue+0x60>
 6e0:	d2 c0       	rjmp	.+420    	; 0x886 <__stack+0x27>
 6e2:	2e 81       	ldd	r18, Y+6	; 0x06
 6e4:	3f 81       	ldd	r19, Y+7	; 0x07
 6e6:	22 30       	cpi	r18, 0x02	; 2
 6e8:	31 05       	cpc	r19, r1
 6ea:	71 f1       	breq	.+92     	; 0x748 <DIO_VidSetPinValue+0xb0>
 6ec:	8e 81       	ldd	r24, Y+6	; 0x06
 6ee:	9f 81       	ldd	r25, Y+7	; 0x07
 6f0:	83 30       	cpi	r24, 0x03	; 3
 6f2:	91 05       	cpc	r25, r1
 6f4:	e9 f1       	breq	.+122    	; 0x770 <DIO_VidSetPinValue+0xd8>
 6f6:	c7 c0       	rjmp	.+398    	; 0x886 <__stack+0x27>
		{
		case PortA :	SET_BIT(PORTA,Copy_U8Pin);	break;
 6f8:	ab e3       	ldi	r26, 0x3B	; 59
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	eb e3       	ldi	r30, 0x3B	; 59
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	48 2f       	mov	r20, r24
 704:	8a 81       	ldd	r24, Y+2	; 0x02
 706:	28 2f       	mov	r18, r24
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 2e       	mov	r0, r18
 710:	02 c0       	rjmp	.+4      	; 0x716 <DIO_VidSetPinValue+0x7e>
 712:	88 0f       	add	r24, r24
 714:	99 1f       	adc	r25, r25
 716:	0a 94       	dec	r0
 718:	e2 f7       	brpl	.-8      	; 0x712 <DIO_VidSetPinValue+0x7a>
 71a:	84 2b       	or	r24, r20
 71c:	8c 93       	st	X, r24
 71e:	b3 c0       	rjmp	.+358    	; 0x886 <__stack+0x27>
		case PortB :	SET_BIT(PORTB,Copy_U8Pin);	break;
 720:	a8 e3       	ldi	r26, 0x38	; 56
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	e8 e3       	ldi	r30, 0x38	; 56
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
 72a:	48 2f       	mov	r20, r24
 72c:	8a 81       	ldd	r24, Y+2	; 0x02
 72e:	28 2f       	mov	r18, r24
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	81 e0       	ldi	r24, 0x01	; 1
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	02 2e       	mov	r0, r18
 738:	02 c0       	rjmp	.+4      	; 0x73e <DIO_VidSetPinValue+0xa6>
 73a:	88 0f       	add	r24, r24
 73c:	99 1f       	adc	r25, r25
 73e:	0a 94       	dec	r0
 740:	e2 f7       	brpl	.-8      	; 0x73a <DIO_VidSetPinValue+0xa2>
 742:	84 2b       	or	r24, r20
 744:	8c 93       	st	X, r24
 746:	9f c0       	rjmp	.+318    	; 0x886 <__stack+0x27>
		case PortC :	SET_BIT(PORTC,Copy_U8Pin);	break;
 748:	a5 e3       	ldi	r26, 0x35	; 53
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	e5 e3       	ldi	r30, 0x35	; 53
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	80 81       	ld	r24, Z
 752:	48 2f       	mov	r20, r24
 754:	8a 81       	ldd	r24, Y+2	; 0x02
 756:	28 2f       	mov	r18, r24
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	02 2e       	mov	r0, r18
 760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_VidSetPinValue+0xce>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	0a 94       	dec	r0
 768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_VidSetPinValue+0xca>
 76a:	84 2b       	or	r24, r20
 76c:	8c 93       	st	X, r24
 76e:	8b c0       	rjmp	.+278    	; 0x886 <__stack+0x27>
		case PortD :	SET_BIT(PORTD,Copy_U8Pin);	break;
 770:	a2 e3       	ldi	r26, 0x32	; 50
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	e2 e3       	ldi	r30, 0x32	; 50
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	48 2f       	mov	r20, r24
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	28 2f       	mov	r18, r24
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 2e       	mov	r0, r18
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_VidSetPinValue+0xf6>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_VidSetPinValue+0xf2>
 792:	84 2b       	or	r24, r20
 794:	8c 93       	st	X, r24
 796:	77 c0       	rjmp	.+238    	; 0x886 <__stack+0x27>
		default:									break;
		}
	}
	else if(Low == Copy_U8Value)
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	88 23       	and	r24, r24
 79c:	09 f0       	breq	.+2      	; 0x7a0 <DIO_VidSetPinValue+0x108>
 79e:	73 c0       	rjmp	.+230    	; 0x886 <__stack+0x27>
	{
		switch(Copy_U8port)
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	28 2f       	mov	r18, r24
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	3d 83       	std	Y+5, r19	; 0x05
 7a8:	2c 83       	std	Y+4, r18	; 0x04
 7aa:	8c 81       	ldd	r24, Y+4	; 0x04
 7ac:	9d 81       	ldd	r25, Y+5	; 0x05
 7ae:	81 30       	cpi	r24, 0x01	; 1
 7b0:	91 05       	cpc	r25, r1
 7b2:	59 f1       	breq	.+86     	; 0x80a <DIO_VidSetPinValue+0x172>
 7b4:	2c 81       	ldd	r18, Y+4	; 0x04
 7b6:	3d 81       	ldd	r19, Y+5	; 0x05
 7b8:	22 30       	cpi	r18, 0x02	; 2
 7ba:	31 05       	cpc	r19, r1
 7bc:	2c f4       	brge	.+10     	; 0x7c8 <DIO_VidSetPinValue+0x130>
 7be:	8c 81       	ldd	r24, Y+4	; 0x04
 7c0:	9d 81       	ldd	r25, Y+5	; 0x05
 7c2:	00 97       	sbiw	r24, 0x00	; 0
 7c4:	69 f0       	breq	.+26     	; 0x7e0 <DIO_VidSetPinValue+0x148>
 7c6:	5f c0       	rjmp	.+190    	; 0x886 <__stack+0x27>
 7c8:	2c 81       	ldd	r18, Y+4	; 0x04
 7ca:	3d 81       	ldd	r19, Y+5	; 0x05
 7cc:	22 30       	cpi	r18, 0x02	; 2
 7ce:	31 05       	cpc	r19, r1
 7d0:	89 f1       	breq	.+98     	; 0x834 <DIO_VidSetPinValue+0x19c>
 7d2:	8c 81       	ldd	r24, Y+4	; 0x04
 7d4:	9d 81       	ldd	r25, Y+5	; 0x05
 7d6:	83 30       	cpi	r24, 0x03	; 3
 7d8:	91 05       	cpc	r25, r1
 7da:	09 f4       	brne	.+2      	; 0x7de <DIO_VidSetPinValue+0x146>
 7dc:	40 c0       	rjmp	.+128    	; 0x85e <DIO_VidSetPinValue+0x1c6>
 7de:	53 c0       	rjmp	.+166    	; 0x886 <__stack+0x27>
		{
		case PortA :	CLR_BIT(PORTA,Copy_U8Pin);	 break;
 7e0:	ab e3       	ldi	r26, 0x3B	; 59
 7e2:	b0 e0       	ldi	r27, 0x00	; 0
 7e4:	eb e3       	ldi	r30, 0x3B	; 59
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	80 81       	ld	r24, Z
 7ea:	48 2f       	mov	r20, r24
 7ec:	8a 81       	ldd	r24, Y+2	; 0x02
 7ee:	28 2f       	mov	r18, r24
 7f0:	30 e0       	ldi	r19, 0x00	; 0
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	02 2e       	mov	r0, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_VidSetPinValue+0x166>
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	0a 94       	dec	r0
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_VidSetPinValue+0x162>
 802:	80 95       	com	r24
 804:	84 23       	and	r24, r20
 806:	8c 93       	st	X, r24
 808:	3e c0       	rjmp	.+124    	; 0x886 <__stack+0x27>
		case PortB :	CLR_BIT(PORTB,Copy_U8Pin);	 break;
 80a:	a8 e3       	ldi	r26, 0x38	; 56
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	e8 e3       	ldi	r30, 0x38	; 56
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8a 81       	ldd	r24, Y+2	; 0x02
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 2e       	mov	r0, r18
 822:	02 c0       	rjmp	.+4      	; 0x828 <DIO_VidSetPinValue+0x190>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <DIO_VidSetPinValue+0x18c>
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	8c 93       	st	X, r24
 832:	29 c0       	rjmp	.+82     	; 0x886 <__stack+0x27>
		case PortC :	CLR_BIT(PORTC,Copy_U8Pin);	 break;
 834:	a5 e3       	ldi	r26, 0x35	; 53
 836:	b0 e0       	ldi	r27, 0x00	; 0
 838:	e5 e3       	ldi	r30, 0x35	; 53
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	48 2f       	mov	r20, r24
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	28 2f       	mov	r18, r24
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 2e       	mov	r0, r18
 84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_VidSetPinValue+0x1ba>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	0a 94       	dec	r0
 854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_VidSetPinValue+0x1b6>
 856:	80 95       	com	r24
 858:	84 23       	and	r24, r20
 85a:	8c 93       	st	X, r24
 85c:	14 c0       	rjmp	.+40     	; 0x886 <__stack+0x27>
		case PortD :	CLR_BIT(PORTD,Copy_U8Pin);   break;
 85e:	a2 e3       	ldi	r26, 0x32	; 50
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e2 e3       	ldi	r30, 0x32	; 50
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	48 2f       	mov	r20, r24
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 2e       	mov	r0, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	0a 94       	dec	r0
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	80 95       	com	r24
 882:	84 23       	and	r24, r20
 884:	8c 93       	st	X, r24
		}
	}
	else
	{
	}
}
 886:	27 96       	adiw	r28, 0x07	; 7
 888:	0f b6       	in	r0, 0x3f	; 63
 88a:	f8 94       	cli
 88c:	de bf       	out	0x3e, r29	; 62
 88e:	0f be       	out	0x3f, r0	; 63
 890:	cd bf       	out	0x3d, r28	; 61
 892:	cf 91       	pop	r28
 894:	df 91       	pop	r29
 896:	08 95       	ret

00000898 <DIO_VidSetPortDirection>:


void DIO_VidSetPortDirection(u8 Copy_U8port,u8 Copy_U8Direction)
{
 898:	df 93       	push	r29
 89a:	cf 93       	push	r28
 89c:	00 d0       	rcall	.+0      	; 0x89e <DIO_VidSetPortDirection+0x6>
 89e:	00 d0       	rcall	.+0      	; 0x8a0 <DIO_VidSetPortDirection+0x8>
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	89 83       	std	Y+1, r24	; 0x01
 8a6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_U8port)
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	28 2f       	mov	r18, r24
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	3c 83       	std	Y+4, r19	; 0x04
 8b0:	2b 83       	std	Y+3, r18	; 0x03
 8b2:	8b 81       	ldd	r24, Y+3	; 0x03
 8b4:	9c 81       	ldd	r25, Y+4	; 0x04
 8b6:	81 30       	cpi	r24, 0x01	; 1
 8b8:	91 05       	cpc	r25, r1
 8ba:	d1 f0       	breq	.+52     	; 0x8f0 <DIO_VidSetPortDirection+0x58>
 8bc:	2b 81       	ldd	r18, Y+3	; 0x03
 8be:	3c 81       	ldd	r19, Y+4	; 0x04
 8c0:	22 30       	cpi	r18, 0x02	; 2
 8c2:	31 05       	cpc	r19, r1
 8c4:	2c f4       	brge	.+10     	; 0x8d0 <DIO_VidSetPortDirection+0x38>
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	61 f0       	breq	.+24     	; 0x8e6 <DIO_VidSetPortDirection+0x4e>
 8ce:	1e c0       	rjmp	.+60     	; 0x90c <DIO_VidSetPortDirection+0x74>
 8d0:	2b 81       	ldd	r18, Y+3	; 0x03
 8d2:	3c 81       	ldd	r19, Y+4	; 0x04
 8d4:	22 30       	cpi	r18, 0x02	; 2
 8d6:	31 05       	cpc	r19, r1
 8d8:	81 f0       	breq	.+32     	; 0x8fa <DIO_VidSetPortDirection+0x62>
 8da:	8b 81       	ldd	r24, Y+3	; 0x03
 8dc:	9c 81       	ldd	r25, Y+4	; 0x04
 8de:	83 30       	cpi	r24, 0x03	; 3
 8e0:	91 05       	cpc	r25, r1
 8e2:	81 f0       	breq	.+32     	; 0x904 <DIO_VidSetPortDirection+0x6c>
 8e4:	13 c0       	rjmp	.+38     	; 0x90c <DIO_VidSetPortDirection+0x74>
	{
	case PortA :	DDRA=Copy_U8Direction;	break;
 8e6:	ea e3       	ldi	r30, 0x3A	; 58
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	8a 81       	ldd	r24, Y+2	; 0x02
 8ec:	80 83       	st	Z, r24
 8ee:	0e c0       	rjmp	.+28     	; 0x90c <DIO_VidSetPortDirection+0x74>
	case PortB :	DDRB=Copy_U8Direction;	break;
 8f0:	e7 e3       	ldi	r30, 0x37	; 55
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	8a 81       	ldd	r24, Y+2	; 0x02
 8f6:	80 83       	st	Z, r24
 8f8:	09 c0       	rjmp	.+18     	; 0x90c <DIO_VidSetPortDirection+0x74>
	case PortC :	DDRC=Copy_U8Direction;	break;
 8fa:	e4 e3       	ldi	r30, 0x34	; 52
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	80 83       	st	Z, r24
 902:	04 c0       	rjmp	.+8      	; 0x90c <DIO_VidSetPortDirection+0x74>
	case PortD :	DDRD=Copy_U8Direction;	break;
 904:	e1 e3       	ldi	r30, 0x31	; 49
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	8a 81       	ldd	r24, Y+2	; 0x02
 90a:	80 83       	st	Z, r24
	default:								break;
	}


}
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	cf 91       	pop	r28
 916:	df 91       	pop	r29
 918:	08 95       	ret

0000091a <DIO_VidSetPortValue>:


void DIO_VidSetPortValue(u8 Copy_U8port,u8 Copy_U8Value)
{
 91a:	df 93       	push	r29
 91c:	cf 93       	push	r28
 91e:	00 d0       	rcall	.+0      	; 0x920 <DIO_VidSetPortValue+0x6>
 920:	00 d0       	rcall	.+0      	; 0x922 <DIO_VidSetPortValue+0x8>
 922:	cd b7       	in	r28, 0x3d	; 61
 924:	de b7       	in	r29, 0x3e	; 62
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
 92a:	89 81       	ldd	r24, Y+1	; 0x01
 92c:	28 2f       	mov	r18, r24
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	3c 83       	std	Y+4, r19	; 0x04
 932:	2b 83       	std	Y+3, r18	; 0x03
 934:	8b 81       	ldd	r24, Y+3	; 0x03
 936:	9c 81       	ldd	r25, Y+4	; 0x04
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	91 05       	cpc	r25, r1
 93c:	d1 f0       	breq	.+52     	; 0x972 <DIO_VidSetPortValue+0x58>
 93e:	2b 81       	ldd	r18, Y+3	; 0x03
 940:	3c 81       	ldd	r19, Y+4	; 0x04
 942:	22 30       	cpi	r18, 0x02	; 2
 944:	31 05       	cpc	r19, r1
 946:	2c f4       	brge	.+10     	; 0x952 <DIO_VidSetPortValue+0x38>
 948:	8b 81       	ldd	r24, Y+3	; 0x03
 94a:	9c 81       	ldd	r25, Y+4	; 0x04
 94c:	00 97       	sbiw	r24, 0x00	; 0
 94e:	61 f0       	breq	.+24     	; 0x968 <DIO_VidSetPortValue+0x4e>
 950:	1e c0       	rjmp	.+60     	; 0x98e <DIO_VidSetPortValue+0x74>
 952:	2b 81       	ldd	r18, Y+3	; 0x03
 954:	3c 81       	ldd	r19, Y+4	; 0x04
 956:	22 30       	cpi	r18, 0x02	; 2
 958:	31 05       	cpc	r19, r1
 95a:	81 f0       	breq	.+32     	; 0x97c <DIO_VidSetPortValue+0x62>
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	9c 81       	ldd	r25, Y+4	; 0x04
 960:	83 30       	cpi	r24, 0x03	; 3
 962:	91 05       	cpc	r25, r1
 964:	81 f0       	breq	.+32     	; 0x986 <DIO_VidSetPortValue+0x6c>
 966:	13 c0       	rjmp	.+38     	; 0x98e <DIO_VidSetPortValue+0x74>
	{
	case PortA :	PORTA=Copy_U8Value;	break;
 968:	eb e3       	ldi	r30, 0x3B	; 59
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	80 83       	st	Z, r24
 970:	0e c0       	rjmp	.+28     	; 0x98e <DIO_VidSetPortValue+0x74>
	case PortB :	PORTB=Copy_U8Value;	break;
 972:	e8 e3       	ldi	r30, 0x38	; 56
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	8a 81       	ldd	r24, Y+2	; 0x02
 978:	80 83       	st	Z, r24
 97a:	09 c0       	rjmp	.+18     	; 0x98e <DIO_VidSetPortValue+0x74>
	case PortC :	PORTC=Copy_U8Value;	break;
 97c:	e5 e3       	ldi	r30, 0x35	; 53
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	8a 81       	ldd	r24, Y+2	; 0x02
 982:	80 83       	st	Z, r24
 984:	04 c0       	rjmp	.+8      	; 0x98e <DIO_VidSetPortValue+0x74>
	case PortD :	PORTD=Copy_U8Value;	break;
 986:	e2 e3       	ldi	r30, 0x32	; 50
 988:	f0 e0       	ldi	r31, 0x00	; 0
 98a:	8a 81       	ldd	r24, Y+2	; 0x02
 98c:	80 83       	st	Z, r24
	default:							break;
	}
}
 98e:	0f 90       	pop	r0
 990:	0f 90       	pop	r0
 992:	0f 90       	pop	r0
 994:	0f 90       	pop	r0
 996:	cf 91       	pop	r28
 998:	df 91       	pop	r29
 99a:	08 95       	ret

0000099c <DIO_U8GetPinValue>:


u8 DIO_U8GetPinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{	u8 Local_U8PinValue;
 99c:	df 93       	push	r29
 99e:	cf 93       	push	r28
 9a0:	00 d0       	rcall	.+0      	; 0x9a2 <DIO_U8GetPinValue+0x6>
 9a2:	00 d0       	rcall	.+0      	; 0x9a4 <DIO_U8GetPinValue+0x8>
 9a4:	0f 92       	push	r0
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
 9aa:	8a 83       	std	Y+2, r24	; 0x02
 9ac:	6b 83       	std	Y+3, r22	; 0x03
switch(Copy_U8port)
 9ae:	8a 81       	ldd	r24, Y+2	; 0x02
 9b0:	28 2f       	mov	r18, r24
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	3d 83       	std	Y+5, r19	; 0x05
 9b6:	2c 83       	std	Y+4, r18	; 0x04
 9b8:	4c 81       	ldd	r20, Y+4	; 0x04
 9ba:	5d 81       	ldd	r21, Y+5	; 0x05
 9bc:	41 30       	cpi	r20, 0x01	; 1
 9be:	51 05       	cpc	r21, r1
 9c0:	41 f1       	breq	.+80     	; 0xa12 <DIO_U8GetPinValue+0x76>
 9c2:	8c 81       	ldd	r24, Y+4	; 0x04
 9c4:	9d 81       	ldd	r25, Y+5	; 0x05
 9c6:	82 30       	cpi	r24, 0x02	; 2
 9c8:	91 05       	cpc	r25, r1
 9ca:	34 f4       	brge	.+12     	; 0x9d8 <DIO_U8GetPinValue+0x3c>
 9cc:	2c 81       	ldd	r18, Y+4	; 0x04
 9ce:	3d 81       	ldd	r19, Y+5	; 0x05
 9d0:	21 15       	cp	r18, r1
 9d2:	31 05       	cpc	r19, r1
 9d4:	61 f0       	breq	.+24     	; 0x9ee <DIO_U8GetPinValue+0x52>
 9d6:	52 c0       	rjmp	.+164    	; 0xa7c <DIO_U8GetPinValue+0xe0>
 9d8:	4c 81       	ldd	r20, Y+4	; 0x04
 9da:	5d 81       	ldd	r21, Y+5	; 0x05
 9dc:	42 30       	cpi	r20, 0x02	; 2
 9de:	51 05       	cpc	r21, r1
 9e0:	51 f1       	breq	.+84     	; 0xa36 <DIO_U8GetPinValue+0x9a>
 9e2:	8c 81       	ldd	r24, Y+4	; 0x04
 9e4:	9d 81       	ldd	r25, Y+5	; 0x05
 9e6:	83 30       	cpi	r24, 0x03	; 3
 9e8:	91 05       	cpc	r25, r1
 9ea:	b9 f1       	breq	.+110    	; 0xa5a <DIO_U8GetPinValue+0xbe>
 9ec:	47 c0       	rjmp	.+142    	; 0xa7c <DIO_U8GetPinValue+0xe0>
{
case PortA :	Local_U8PinValue=GET_BIT(PINA,Copy_U8Pin);	 break;
 9ee:	e9 e3       	ldi	r30, 0x39	; 57
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	28 2f       	mov	r18, r24
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	8b 81       	ldd	r24, Y+3	; 0x03
 9fa:	88 2f       	mov	r24, r24
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	a9 01       	movw	r20, r18
 a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_U8GetPinValue+0x6a>
 a02:	55 95       	asr	r21
 a04:	47 95       	ror	r20
 a06:	8a 95       	dec	r24
 a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_U8GetPinValue+0x66>
 a0a:	ca 01       	movw	r24, r20
 a0c:	81 70       	andi	r24, 0x01	; 1
 a0e:	89 83       	std	Y+1, r24	; 0x01
 a10:	35 c0       	rjmp	.+106    	; 0xa7c <DIO_U8GetPinValue+0xe0>
case PortB :	Local_U8PinValue=GET_BIT(PINB,Copy_U8Pin);	 break;
 a12:	e6 e3       	ldi	r30, 0x36	; 54
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	80 81       	ld	r24, Z
 a18:	28 2f       	mov	r18, r24
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	8b 81       	ldd	r24, Y+3	; 0x03
 a1e:	88 2f       	mov	r24, r24
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	a9 01       	movw	r20, r18
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <DIO_U8GetPinValue+0x8e>
 a26:	55 95       	asr	r21
 a28:	47 95       	ror	r20
 a2a:	8a 95       	dec	r24
 a2c:	e2 f7       	brpl	.-8      	; 0xa26 <DIO_U8GetPinValue+0x8a>
 a2e:	ca 01       	movw	r24, r20
 a30:	81 70       	andi	r24, 0x01	; 1
 a32:	89 83       	std	Y+1, r24	; 0x01
 a34:	23 c0       	rjmp	.+70     	; 0xa7c <DIO_U8GetPinValue+0xe0>
case PortC :	Local_U8PinValue=GET_BIT(PINC,Copy_U8Pin);	 break;
 a36:	e3 e3       	ldi	r30, 0x33	; 51
 a38:	f0 e0       	ldi	r31, 0x00	; 0
 a3a:	80 81       	ld	r24, Z
 a3c:	28 2f       	mov	r18, r24
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	8b 81       	ldd	r24, Y+3	; 0x03
 a42:	88 2f       	mov	r24, r24
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	a9 01       	movw	r20, r18
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <DIO_U8GetPinValue+0xb2>
 a4a:	55 95       	asr	r21
 a4c:	47 95       	ror	r20
 a4e:	8a 95       	dec	r24
 a50:	e2 f7       	brpl	.-8      	; 0xa4a <DIO_U8GetPinValue+0xae>
 a52:	ca 01       	movw	r24, r20
 a54:	81 70       	andi	r24, 0x01	; 1
 a56:	89 83       	std	Y+1, r24	; 0x01
 a58:	11 c0       	rjmp	.+34     	; 0xa7c <DIO_U8GetPinValue+0xe0>
case PortD: 	Local_U8PinValue=GET_BIT(PIND,Copy_U8Pin);	 break;
 a5a:	e0 e3       	ldi	r30, 0x30	; 48
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	80 81       	ld	r24, Z
 a60:	28 2f       	mov	r18, r24
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	8b 81       	ldd	r24, Y+3	; 0x03
 a66:	88 2f       	mov	r24, r24
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	a9 01       	movw	r20, r18
 a6c:	02 c0       	rjmp	.+4      	; 0xa72 <DIO_U8GetPinValue+0xd6>
 a6e:	55 95       	asr	r21
 a70:	47 95       	ror	r20
 a72:	8a 95       	dec	r24
 a74:	e2 f7       	brpl	.-8      	; 0xa6e <DIO_U8GetPinValue+0xd2>
 a76:	ca 01       	movw	r24, r20
 a78:	81 70       	andi	r24, 0x01	; 1
 a7a:	89 83       	std	Y+1, r24	; 0x01
default:													 break;

}
return Local_U8PinValue;
 a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
 a7e:	0f 90       	pop	r0
 a80:	0f 90       	pop	r0
 a82:	0f 90       	pop	r0
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	cf 91       	pop	r28
 a8a:	df 91       	pop	r29
 a8c:	08 95       	ret

00000a8e <DIO_VidTogglePin>:



void DIO_VidTogglePin(u8 Copy_U8port,u8 Copy_U8Pin)
{
 a8e:	df 93       	push	r29
 a90:	cf 93       	push	r28
 a92:	00 d0       	rcall	.+0      	; 0xa94 <DIO_VidTogglePin+0x6>
 a94:	00 d0       	rcall	.+0      	; 0xa96 <DIO_VidTogglePin+0x8>
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	89 83       	std	Y+1, r24	; 0x01
 a9c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
 a9e:	89 81       	ldd	r24, Y+1	; 0x01
 aa0:	28 2f       	mov	r18, r24
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	3c 83       	std	Y+4, r19	; 0x04
 aa6:	2b 83       	std	Y+3, r18	; 0x03
 aa8:	8b 81       	ldd	r24, Y+3	; 0x03
 aaa:	9c 81       	ldd	r25, Y+4	; 0x04
 aac:	81 30       	cpi	r24, 0x01	; 1
 aae:	91 05       	cpc	r25, r1
 ab0:	49 f1       	breq	.+82     	; 0xb04 <DIO_VidTogglePin+0x76>
 ab2:	2b 81       	ldd	r18, Y+3	; 0x03
 ab4:	3c 81       	ldd	r19, Y+4	; 0x04
 ab6:	22 30       	cpi	r18, 0x02	; 2
 ab8:	31 05       	cpc	r19, r1
 aba:	2c f4       	brge	.+10     	; 0xac6 <DIO_VidTogglePin+0x38>
 abc:	8b 81       	ldd	r24, Y+3	; 0x03
 abe:	9c 81       	ldd	r25, Y+4	; 0x04
 ac0:	00 97       	sbiw	r24, 0x00	; 0
 ac2:	61 f0       	breq	.+24     	; 0xadc <DIO_VidTogglePin+0x4e>
 ac4:	5a c0       	rjmp	.+180    	; 0xb7a <DIO_VidTogglePin+0xec>
 ac6:	2b 81       	ldd	r18, Y+3	; 0x03
 ac8:	3c 81       	ldd	r19, Y+4	; 0x04
 aca:	22 30       	cpi	r18, 0x02	; 2
 acc:	31 05       	cpc	r19, r1
 ace:	71 f1       	breq	.+92     	; 0xb2c <DIO_VidTogglePin+0x9e>
 ad0:	8b 81       	ldd	r24, Y+3	; 0x03
 ad2:	9c 81       	ldd	r25, Y+4	; 0x04
 ad4:	83 30       	cpi	r24, 0x03	; 3
 ad6:	91 05       	cpc	r25, r1
 ad8:	e9 f1       	breq	.+122    	; 0xb54 <DIO_VidTogglePin+0xc6>
 ada:	4f c0       	rjmp	.+158    	; 0xb7a <DIO_VidTogglePin+0xec>
	{
	case PortA :	TOGGLE_BIT(DDRA,Copy_U8Pin);	break;
 adc:	aa e3       	ldi	r26, 0x3A	; 58
 ade:	b0 e0       	ldi	r27, 0x00	; 0
 ae0:	ea e3       	ldi	r30, 0x3A	; 58
 ae2:	f0 e0       	ldi	r31, 0x00	; 0
 ae4:	80 81       	ld	r24, Z
 ae6:	48 2f       	mov	r20, r24
 ae8:	8a 81       	ldd	r24, Y+2	; 0x02
 aea:	28 2f       	mov	r18, r24
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	81 e0       	ldi	r24, 0x01	; 1
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	02 2e       	mov	r0, r18
 af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_VidTogglePin+0x6c>
 af6:	88 0f       	add	r24, r24
 af8:	99 1f       	adc	r25, r25
 afa:	0a 94       	dec	r0
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_VidTogglePin+0x68>
 afe:	84 27       	eor	r24, r20
 b00:	8c 93       	st	X, r24
 b02:	3b c0       	rjmp	.+118    	; 0xb7a <DIO_VidTogglePin+0xec>
	case PortB :	TOGGLE_BIT(DDRB,Copy_U8Pin);	break;
 b04:	a7 e3       	ldi	r26, 0x37	; 55
 b06:	b0 e0       	ldi	r27, 0x00	; 0
 b08:	e7 e3       	ldi	r30, 0x37	; 55
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	80 81       	ld	r24, Z
 b0e:	48 2f       	mov	r20, r24
 b10:	8a 81       	ldd	r24, Y+2	; 0x02
 b12:	28 2f       	mov	r18, r24
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	02 2e       	mov	r0, r18
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_VidTogglePin+0x94>
 b1e:	88 0f       	add	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	0a 94       	dec	r0
 b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_VidTogglePin+0x90>
 b26:	84 27       	eor	r24, r20
 b28:	8c 93       	st	X, r24
 b2a:	27 c0       	rjmp	.+78     	; 0xb7a <DIO_VidTogglePin+0xec>
	case PortC :	TOGGLE_BIT(DDRC,Copy_U8Pin);	break;
 b2c:	a4 e3       	ldi	r26, 0x34	; 52
 b2e:	b0 e0       	ldi	r27, 0x00	; 0
 b30:	e4 e3       	ldi	r30, 0x34	; 52
 b32:	f0 e0       	ldi	r31, 0x00	; 0
 b34:	80 81       	ld	r24, Z
 b36:	48 2f       	mov	r20, r24
 b38:	8a 81       	ldd	r24, Y+2	; 0x02
 b3a:	28 2f       	mov	r18, r24
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	02 2e       	mov	r0, r18
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <DIO_VidTogglePin+0xbc>
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	0a 94       	dec	r0
 b4c:	e2 f7       	brpl	.-8      	; 0xb46 <DIO_VidTogglePin+0xb8>
 b4e:	84 27       	eor	r24, r20
 b50:	8c 93       	st	X, r24
 b52:	13 c0       	rjmp	.+38     	; 0xb7a <DIO_VidTogglePin+0xec>
	case PortD :	TOGGLE_BIT(DDRD,Copy_U8Pin);	break;
 b54:	a1 e3       	ldi	r26, 0x31	; 49
 b56:	b0 e0       	ldi	r27, 0x00	; 0
 b58:	e1 e3       	ldi	r30, 0x31	; 49
 b5a:	f0 e0       	ldi	r31, 0x00	; 0
 b5c:	80 81       	ld	r24, Z
 b5e:	48 2f       	mov	r20, r24
 b60:	8a 81       	ldd	r24, Y+2	; 0x02
 b62:	28 2f       	mov	r18, r24
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	02 2e       	mov	r0, r18
 b6c:	02 c0       	rjmp	.+4      	; 0xb72 <DIO_VidTogglePin+0xe4>
 b6e:	88 0f       	add	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	0a 94       	dec	r0
 b74:	e2 f7       	brpl	.-8      	; 0xb6e <DIO_VidTogglePin+0xe0>
 b76:	84 27       	eor	r24, r20
 b78:	8c 93       	st	X, r24
	default:										break;
	}
}
 b7a:	0f 90       	pop	r0
 b7c:	0f 90       	pop	r0
 b7e:	0f 90       	pop	r0
 b80:	0f 90       	pop	r0
 b82:	cf 91       	pop	r28
 b84:	df 91       	pop	r29
 b86:	08 95       	ret

00000b88 <DIO_VidTogglePinValue>:



void DIO_VidTogglePinValue(u8 Copy_U8port,u8 Copy_U8Pin)
{
 b88:	df 93       	push	r29
 b8a:	cf 93       	push	r28
 b8c:	00 d0       	rcall	.+0      	; 0xb8e <DIO_VidTogglePinValue+0x6>
 b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_VidTogglePinValue+0x8>
 b90:	cd b7       	in	r28, 0x3d	; 61
 b92:	de b7       	in	r29, 0x3e	; 62
 b94:	89 83       	std	Y+1, r24	; 0x01
 b96:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8port)
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	28 2f       	mov	r18, r24
 b9c:	30 e0       	ldi	r19, 0x00	; 0
 b9e:	3c 83       	std	Y+4, r19	; 0x04
 ba0:	2b 83       	std	Y+3, r18	; 0x03
 ba2:	8b 81       	ldd	r24, Y+3	; 0x03
 ba4:	9c 81       	ldd	r25, Y+4	; 0x04
 ba6:	81 30       	cpi	r24, 0x01	; 1
 ba8:	91 05       	cpc	r25, r1
 baa:	49 f1       	breq	.+82     	; 0xbfe <DIO_VidTogglePinValue+0x76>
 bac:	2b 81       	ldd	r18, Y+3	; 0x03
 bae:	3c 81       	ldd	r19, Y+4	; 0x04
 bb0:	22 30       	cpi	r18, 0x02	; 2
 bb2:	31 05       	cpc	r19, r1
 bb4:	2c f4       	brge	.+10     	; 0xbc0 <DIO_VidTogglePinValue+0x38>
 bb6:	8b 81       	ldd	r24, Y+3	; 0x03
 bb8:	9c 81       	ldd	r25, Y+4	; 0x04
 bba:	00 97       	sbiw	r24, 0x00	; 0
 bbc:	61 f0       	breq	.+24     	; 0xbd6 <DIO_VidTogglePinValue+0x4e>
 bbe:	5a c0       	rjmp	.+180    	; 0xc74 <DIO_VidTogglePinValue+0xec>
 bc0:	2b 81       	ldd	r18, Y+3	; 0x03
 bc2:	3c 81       	ldd	r19, Y+4	; 0x04
 bc4:	22 30       	cpi	r18, 0x02	; 2
 bc6:	31 05       	cpc	r19, r1
 bc8:	71 f1       	breq	.+92     	; 0xc26 <DIO_VidTogglePinValue+0x9e>
 bca:	8b 81       	ldd	r24, Y+3	; 0x03
 bcc:	9c 81       	ldd	r25, Y+4	; 0x04
 bce:	83 30       	cpi	r24, 0x03	; 3
 bd0:	91 05       	cpc	r25, r1
 bd2:	e9 f1       	breq	.+122    	; 0xc4e <DIO_VidTogglePinValue+0xc6>
 bd4:	4f c0       	rjmp	.+158    	; 0xc74 <DIO_VidTogglePinValue+0xec>
	{
	case PortA :	TOGGLE_BIT(PORTA,Copy_U8Pin);	break;
 bd6:	ab e3       	ldi	r26, 0x3B	; 59
 bd8:	b0 e0       	ldi	r27, 0x00	; 0
 bda:	eb e3       	ldi	r30, 0x3B	; 59
 bdc:	f0 e0       	ldi	r31, 0x00	; 0
 bde:	80 81       	ld	r24, Z
 be0:	48 2f       	mov	r20, r24
 be2:	8a 81       	ldd	r24, Y+2	; 0x02
 be4:	28 2f       	mov	r18, r24
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	81 e0       	ldi	r24, 0x01	; 1
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	02 2e       	mov	r0, r18
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <DIO_VidTogglePinValue+0x6c>
 bf0:	88 0f       	add	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	0a 94       	dec	r0
 bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <DIO_VidTogglePinValue+0x68>
 bf8:	84 27       	eor	r24, r20
 bfa:	8c 93       	st	X, r24
 bfc:	3b c0       	rjmp	.+118    	; 0xc74 <DIO_VidTogglePinValue+0xec>
	case PortB :	TOGGLE_BIT(PORTB,Copy_U8Pin);	break;
 bfe:	a8 e3       	ldi	r26, 0x38	; 56
 c00:	b0 e0       	ldi	r27, 0x00	; 0
 c02:	e8 e3       	ldi	r30, 0x38	; 56
 c04:	f0 e0       	ldi	r31, 0x00	; 0
 c06:	80 81       	ld	r24, Z
 c08:	48 2f       	mov	r20, r24
 c0a:	8a 81       	ldd	r24, Y+2	; 0x02
 c0c:	28 2f       	mov	r18, r24
 c0e:	30 e0       	ldi	r19, 0x00	; 0
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	02 2e       	mov	r0, r18
 c16:	02 c0       	rjmp	.+4      	; 0xc1c <DIO_VidTogglePinValue+0x94>
 c18:	88 0f       	add	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	0a 94       	dec	r0
 c1e:	e2 f7       	brpl	.-8      	; 0xc18 <DIO_VidTogglePinValue+0x90>
 c20:	84 27       	eor	r24, r20
 c22:	8c 93       	st	X, r24
 c24:	27 c0       	rjmp	.+78     	; 0xc74 <DIO_VidTogglePinValue+0xec>
	case PortC :	TOGGLE_BIT(PORTC,Copy_U8Pin);	break;
 c26:	a5 e3       	ldi	r26, 0x35	; 53
 c28:	b0 e0       	ldi	r27, 0x00	; 0
 c2a:	e5 e3       	ldi	r30, 0x35	; 53
 c2c:	f0 e0       	ldi	r31, 0x00	; 0
 c2e:	80 81       	ld	r24, Z
 c30:	48 2f       	mov	r20, r24
 c32:	8a 81       	ldd	r24, Y+2	; 0x02
 c34:	28 2f       	mov	r18, r24
 c36:	30 e0       	ldi	r19, 0x00	; 0
 c38:	81 e0       	ldi	r24, 0x01	; 1
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	02 2e       	mov	r0, r18
 c3e:	02 c0       	rjmp	.+4      	; 0xc44 <DIO_VidTogglePinValue+0xbc>
 c40:	88 0f       	add	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	0a 94       	dec	r0
 c46:	e2 f7       	brpl	.-8      	; 0xc40 <DIO_VidTogglePinValue+0xb8>
 c48:	84 27       	eor	r24, r20
 c4a:	8c 93       	st	X, r24
 c4c:	13 c0       	rjmp	.+38     	; 0xc74 <DIO_VidTogglePinValue+0xec>
	case PortD :	TOGGLE_BIT(PORTD,Copy_U8Pin);	break;
 c4e:	a2 e3       	ldi	r26, 0x32	; 50
 c50:	b0 e0       	ldi	r27, 0x00	; 0
 c52:	e2 e3       	ldi	r30, 0x32	; 50
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	80 81       	ld	r24, Z
 c58:	48 2f       	mov	r20, r24
 c5a:	8a 81       	ldd	r24, Y+2	; 0x02
 c5c:	28 2f       	mov	r18, r24
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	81 e0       	ldi	r24, 0x01	; 1
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	02 2e       	mov	r0, r18
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_VidTogglePinValue+0xe4>
 c68:	88 0f       	add	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	0a 94       	dec	r0
 c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_VidTogglePinValue+0xe0>
 c70:	84 27       	eor	r24, r20
 c72:	8c 93       	st	X, r24
	default:										break;
	}
}
 c74:	0f 90       	pop	r0
 c76:	0f 90       	pop	r0
 c78:	0f 90       	pop	r0
 c7a:	0f 90       	pop	r0
 c7c:	cf 91       	pop	r28
 c7e:	df 91       	pop	r29
 c80:	08 95       	ret

00000c82 <EEPROM_VidWrite>:
#include "../../MCAL/I2C/I2C_Interface.h"
#include "EEPROM_Private.h"
//					EEPROM AT24C08


void EEPROM_VidWrite(u16 Copy_U16Address,u8 Copy_U8Data,u8 Copy_U8SelectedEEPROM){
 c82:	df 93       	push	r29
 c84:	cf 93       	push	r28
 c86:	00 d0       	rcall	.+0      	; 0xc88 <EEPROM_VidWrite+0x6>
 c88:	00 d0       	rcall	.+0      	; 0xc8a <EEPROM_VidWrite+0x8>
 c8a:	0f 92       	push	r0
 c8c:	cd b7       	in	r28, 0x3d	; 61
 c8e:	de b7       	in	r29, 0x3e	; 62
 c90:	9b 83       	std	Y+3, r25	; 0x03
 c92:	8a 83       	std	Y+2, r24	; 0x02
 c94:	6c 83       	std	Y+4, r22	; 0x04
 c96:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_U8Address;
	if(Copy_U8SelectedEEPROM==FIRST_EEPROM){
 c98:	8d 81       	ldd	r24, Y+5	; 0x05
 c9a:	88 23       	and	r24, r24
 c9c:	19 f4       	brne	.+6      	; 0xca4 <EEPROM_VidWrite+0x22>
		Local_U8Address=EEPROM_ADDRESS;}
 c9e:	80 e5       	ldi	r24, 0x50	; 80
 ca0:	89 83       	std	Y+1, r24	; 0x01
 ca2:	05 c0       	rjmp	.+10     	; 0xcae <EEPROM_VidWrite+0x2c>
	else if(Copy_U8SelectedEEPROM==SECOND_EEPROM){
 ca4:	8d 81       	ldd	r24, Y+5	; 0x05
 ca6:	81 30       	cpi	r24, 0x01	; 1
 ca8:	11 f4       	brne	.+4      	; 0xcae <EEPROM_VidWrite+0x2c>
		Local_U8Address=EEPROM_ADDRESS|(1<<2);
 caa:	84 e5       	ldi	r24, 0x54	; 84
 cac:	89 83       	std	Y+1, r24	; 0x01
	}

	I2C_Start();
 cae:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_Start>
 	I2C_SendAddress((((Copy_U16Address>>8)&SEL_2BITS)|Local_U8Address ),WRITE);
 cb2:	8a 81       	ldd	r24, Y+2	; 0x02
 cb4:	9b 81       	ldd	r25, Y+3	; 0x03
 cb6:	89 2f       	mov	r24, r25
 cb8:	99 27       	eor	r25, r25
 cba:	98 2f       	mov	r25, r24
 cbc:	93 70       	andi	r25, 0x03	; 3
 cbe:	89 81       	ldd	r24, Y+1	; 0x01
 cc0:	89 2b       	or	r24, r25
 cc2:	60 e0       	ldi	r22, 0x00	; 0
 cc4:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_SendAddress>
 	I2C_U8MasterSend((u8)Copy_U16Address);
 cc8:	8a 81       	ldd	r24, Y+2	; 0x02
 cca:	0e 94 8a 01 	call	0x314	; 0x314 <I2C_U8MasterSend>
 	I2C_U8MasterSend(Copy_U8Data);
 cce:	8c 81       	ldd	r24, Y+4	; 0x04
 cd0:	0e 94 8a 01 	call	0x314	; 0x314 <I2C_U8MasterSend>
	I2C_VidStop();
 cd4:	0e 94 39 02 	call	0x472	; 0x472 <I2C_VidStop>
}
 cd8:	0f 90       	pop	r0
 cda:	0f 90       	pop	r0
 cdc:	0f 90       	pop	r0
 cde:	0f 90       	pop	r0
 ce0:	0f 90       	pop	r0
 ce2:	cf 91       	pop	r28
 ce4:	df 91       	pop	r29
 ce6:	08 95       	ret

00000ce8 <EEPROM_VidRead>:

void EEPROM_VidRead(u16 Copy_U16Address,u8* Copy_U8Data,u8 Copy_U8SelectedEEPROM){
 ce8:	df 93       	push	r29
 cea:	cf 93       	push	r28
 cec:	00 d0       	rcall	.+0      	; 0xcee <EEPROM_VidRead+0x6>
 cee:	00 d0       	rcall	.+0      	; 0xcf0 <EEPROM_VidRead+0x8>
 cf0:	00 d0       	rcall	.+0      	; 0xcf2 <EEPROM_VidRead+0xa>
 cf2:	cd b7       	in	r28, 0x3d	; 61
 cf4:	de b7       	in	r29, 0x3e	; 62
 cf6:	9b 83       	std	Y+3, r25	; 0x03
 cf8:	8a 83       	std	Y+2, r24	; 0x02
 cfa:	7d 83       	std	Y+5, r23	; 0x05
 cfc:	6c 83       	std	Y+4, r22	; 0x04
 cfe:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_U8Address;
	if(Copy_U8SelectedEEPROM==FIRST_EEPROM){
 d00:	8e 81       	ldd	r24, Y+6	; 0x06
 d02:	88 23       	and	r24, r24
 d04:	19 f4       	brne	.+6      	; 0xd0c <EEPROM_VidRead+0x24>
		Local_U8Address=EEPROM_ADDRESS;}
 d06:	80 e5       	ldi	r24, 0x50	; 80
 d08:	89 83       	std	Y+1, r24	; 0x01
 d0a:	05 c0       	rjmp	.+10     	; 0xd16 <EEPROM_VidRead+0x2e>
	else if(Copy_U8SelectedEEPROM==SECOND_EEPROM){
 d0c:	8e 81       	ldd	r24, Y+6	; 0x06
 d0e:	81 30       	cpi	r24, 0x01	; 1
 d10:	11 f4       	brne	.+4      	; 0xd16 <EEPROM_VidRead+0x2e>
		Local_U8Address=EEPROM_ADDRESS|(1<<2);
 d12:	84 e5       	ldi	r24, 0x54	; 84
 d14:	89 83       	std	Y+1, r24	; 0x01
	}
	I2C_Start();
 d16:	0e 94 fd 00 	call	0x1fa	; 0x1fa <I2C_Start>
 	I2C_SendAddress((((Copy_U16Address>>8)&SEL_2BITS)|Local_U8Address),WRITE);
 d1a:	8a 81       	ldd	r24, Y+2	; 0x02
 d1c:	9b 81       	ldd	r25, Y+3	; 0x03
 d1e:	89 2f       	mov	r24, r25
 d20:	99 27       	eor	r25, r25
 d22:	98 2f       	mov	r25, r24
 d24:	93 70       	andi	r25, 0x03	; 3
 d26:	89 81       	ldd	r24, Y+1	; 0x01
 d28:	89 2b       	or	r24, r25
 d2a:	60 e0       	ldi	r22, 0x00	; 0
 d2c:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_SendAddress>
 	I2C_U8MasterSend((u8)Copy_U16Address);
 d30:	8a 81       	ldd	r24, Y+2	; 0x02
 d32:	0e 94 8a 01 	call	0x314	; 0x314 <I2C_U8MasterSend>
 	I2C_RepeatedStart();
 d36:	0e 94 21 01 	call	0x242	; 0x242 <I2C_RepeatedStart>
 	I2C_SendAddress((((Copy_U16Address>>8)&SEL_2BITS)|Local_U8Address),READ);
 d3a:	8a 81       	ldd	r24, Y+2	; 0x02
 d3c:	9b 81       	ldd	r25, Y+3	; 0x03
 d3e:	89 2f       	mov	r24, r25
 d40:	99 27       	eor	r25, r25
 d42:	98 2f       	mov	r25, r24
 d44:	93 70       	andi	r25, 0x03	; 3
 d46:	89 81       	ldd	r24, Y+1	; 0x01
 d48:	89 2b       	or	r24, r25
 d4a:	61 e0       	ldi	r22, 0x01	; 1
 d4c:	0e 94 45 01 	call	0x28a	; 0x28a <I2C_SendAddress>
 	I2C_U8MasterReceive(Copy_U8Data);
 d50:	8c 81       	ldd	r24, Y+4	; 0x04
 d52:	9d 81       	ldd	r25, Y+5	; 0x05
 d54:	0e 94 0a 02 	call	0x414	; 0x414 <I2C_U8MasterReceive>
	I2C_VidStop();
 d58:	0e 94 39 02 	call	0x472	; 0x472 <I2C_VidStop>
}
 d5c:	26 96       	adiw	r28, 0x06	; 6
 d5e:	0f b6       	in	r0, 0x3f	; 63
 d60:	f8 94       	cli
 d62:	de bf       	out	0x3e, r29	; 62
 d64:	0f be       	out	0x3f, r0	; 63
 d66:	cd bf       	out	0x3d, r28	; 61
 d68:	cf 91       	pop	r28
 d6a:	df 91       	pop	r29
 d6c:	08 95       	ret

00000d6e <main>:
#include "../lib/BIT_MATH.h"
#include "../lib/AVR32_REG.h"
#include "../HAL/E2PROM/EEPROM_Interface.h"
#include "../MCAL/DIO/DIO_Interface.h"
#include "../MCAL/I2C/I2C_Interface.h"
int main(){
 d6e:	df 93       	push	r29
 d70:	cf 93       	push	r28
 d72:	0f 92       	push	r0
 d74:	cd b7       	in	r28, 0x3d	; 61
 d76:	de b7       	in	r29, 0x3e	; 62
 	u8  test;
 	I2C_InitMaster(EEPROM_Freq,PRE_16,0x01);
 d78:	80 e8       	ldi	r24, 0x80	; 128
 d7a:	9a e1       	ldi	r25, 0x1A	; 26
 d7c:	62 e0       	ldi	r22, 0x02	; 2
 d7e:	41 e0       	ldi	r20, 0x01	; 1
 d80:	0e 94 67 00 	call	0xce	; 0xce <I2C_InitMaster>
 	DIO_VidSetPortDirection(0,255);
 d84:	80 e0       	ldi	r24, 0x00	; 0
 d86:	6f ef       	ldi	r22, 0xFF	; 255
 d88:	0e 94 4c 04 	call	0x898	; 0x898 <DIO_VidSetPortDirection>

	while(1){

		EEPROM_VidWrite(500,'c',FIRST_EEPROM);
 d8c:	84 ef       	ldi	r24, 0xF4	; 244
 d8e:	91 e0       	ldi	r25, 0x01	; 1
 d90:	63 e6       	ldi	r22, 0x63	; 99
 d92:	40 e0       	ldi	r20, 0x00	; 0
 d94:	0e 94 41 06 	call	0xc82	; 0xc82 <EEPROM_VidWrite>
		EEPROM_VidRead(500,&test,FIRST_EEPROM);
 d98:	84 ef       	ldi	r24, 0xF4	; 244
 d9a:	91 e0       	ldi	r25, 0x01	; 1
 d9c:	9e 01       	movw	r18, r28
 d9e:	2f 5f       	subi	r18, 0xFF	; 255
 da0:	3f 4f       	sbci	r19, 0xFF	; 255
 da2:	b9 01       	movw	r22, r18
 da4:	40 e0       	ldi	r20, 0x00	; 0
 da6:	0e 94 74 06 	call	0xce8	; 0xce8 <EEPROM_VidRead>
		DIO_VidSetPortValue(PortA,test);
 daa:	99 81       	ldd	r25, Y+1	; 0x01
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	69 2f       	mov	r22, r25
 db0:	0e 94 8d 04 	call	0x91a	; 0x91a <DIO_VidSetPortValue>
 db4:	eb cf       	rjmp	.-42     	; 0xd8c <main+0x1e>

00000db6 <__divmodsi4>:
 db6:	97 fb       	bst	r25, 7
 db8:	09 2e       	mov	r0, r25
 dba:	05 26       	eor	r0, r21
 dbc:	0e d0       	rcall	.+28     	; 0xdda <__divmodsi4_neg1>
 dbe:	57 fd       	sbrc	r21, 7
 dc0:	04 d0       	rcall	.+8      	; 0xdca <__divmodsi4_neg2>
 dc2:	14 d0       	rcall	.+40     	; 0xdec <__udivmodsi4>
 dc4:	0a d0       	rcall	.+20     	; 0xdda <__divmodsi4_neg1>
 dc6:	00 1c       	adc	r0, r0
 dc8:	38 f4       	brcc	.+14     	; 0xdd8 <__divmodsi4_exit>

00000dca <__divmodsi4_neg2>:
 dca:	50 95       	com	r21
 dcc:	40 95       	com	r20
 dce:	30 95       	com	r19
 dd0:	21 95       	neg	r18
 dd2:	3f 4f       	sbci	r19, 0xFF	; 255
 dd4:	4f 4f       	sbci	r20, 0xFF	; 255
 dd6:	5f 4f       	sbci	r21, 0xFF	; 255

00000dd8 <__divmodsi4_exit>:
 dd8:	08 95       	ret

00000dda <__divmodsi4_neg1>:
 dda:	f6 f7       	brtc	.-4      	; 0xdd8 <__divmodsi4_exit>
 ddc:	90 95       	com	r25
 dde:	80 95       	com	r24
 de0:	70 95       	com	r23
 de2:	61 95       	neg	r22
 de4:	7f 4f       	sbci	r23, 0xFF	; 255
 de6:	8f 4f       	sbci	r24, 0xFF	; 255
 de8:	9f 4f       	sbci	r25, 0xFF	; 255
 dea:	08 95       	ret

00000dec <__udivmodsi4>:
 dec:	a1 e2       	ldi	r26, 0x21	; 33
 dee:	1a 2e       	mov	r1, r26
 df0:	aa 1b       	sub	r26, r26
 df2:	bb 1b       	sub	r27, r27
 df4:	fd 01       	movw	r30, r26
 df6:	0d c0       	rjmp	.+26     	; 0xe12 <__udivmodsi4_ep>

00000df8 <__udivmodsi4_loop>:
 df8:	aa 1f       	adc	r26, r26
 dfa:	bb 1f       	adc	r27, r27
 dfc:	ee 1f       	adc	r30, r30
 dfe:	ff 1f       	adc	r31, r31
 e00:	a2 17       	cp	r26, r18
 e02:	b3 07       	cpc	r27, r19
 e04:	e4 07       	cpc	r30, r20
 e06:	f5 07       	cpc	r31, r21
 e08:	20 f0       	brcs	.+8      	; 0xe12 <__udivmodsi4_ep>
 e0a:	a2 1b       	sub	r26, r18
 e0c:	b3 0b       	sbc	r27, r19
 e0e:	e4 0b       	sbc	r30, r20
 e10:	f5 0b       	sbc	r31, r21

00000e12 <__udivmodsi4_ep>:
 e12:	66 1f       	adc	r22, r22
 e14:	77 1f       	adc	r23, r23
 e16:	88 1f       	adc	r24, r24
 e18:	99 1f       	adc	r25, r25
 e1a:	1a 94       	dec	r1
 e1c:	69 f7       	brne	.-38     	; 0xdf8 <__udivmodsi4_loop>
 e1e:	60 95       	com	r22
 e20:	70 95       	com	r23
 e22:	80 95       	com	r24
 e24:	90 95       	com	r25
 e26:	9b 01       	movw	r18, r22
 e28:	ac 01       	movw	r20, r24
 e2a:	bd 01       	movw	r22, r26
 e2c:	cf 01       	movw	r24, r30
 e2e:	08 95       	ret

00000e30 <_exit>:
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>
